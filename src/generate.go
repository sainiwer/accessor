package main

//
//import (
//	"fmt"
//	"go/ast"
//	"go/parser"
//	"go/token"
//	"os"
//	"text/template"
//)
//
///*
//这个版本生成包里所有的结构体的访问器
//*/
//const tmpl = `// Code generated by auto generate; DO NOT EDIT!
//
//package {{ .PackageName }}
//
//{{ range .Fields }}
//func (p *{{ .StructName }}) Get{{ .FieldName }}() {{ .FieldType }} {
//    return p.{{ .FieldName }}
//}
//
//func (p *{{ .StructName }}) Set{{ .FieldName }}(value {{ .FieldType }}) {
//    p.{{ .FieldName }} = value
//}
//{{ end }}
//`
//
////go:generate go run generate_Ok.go
//type Field struct {
//	StructName string
//	FieldName  string
//	FieldType  string
//}
//
//type Data struct {
//	PackageName string
//	Fields      []Field
//}
//
//func typeInfo(t ast.Expr) string {
//	switch expr := t.(type) {
//	case *ast.Ident:
//		return expr.Name
//	case *ast.SelectorExpr:
//		return fmt.Sprintf("%s.%s", typeInfo(expr.X), expr.Sel.Name)
//	case *ast.ArrayType:
//		return fmt.Sprintf("[]%s", typeInfo(expr.Elt))
//	case *ast.MapType:
//		return fmt.Sprintf("map[%s]%s", typeInfo(expr.Key), typeInfo(expr.Value))
//	case *ast.StarExpr: // 处理指针类型
//		return fmt.Sprintf("*%s", typeInfo(expr.X))
//	default:
//		return fmt.Sprintf("%s", t) // 返回原始表达式
//	}
//}
//
//func main() {
//	set := token.NewFileSet()
//	node, err := parser.ParseDir(set, ".", nil, parser.ParseComments)
//	if err != nil {
//		fmt.Println(err)
//		return
//	}
//
//	var data Data
//
//	for pkgName, pkg := range node {
//		data.PackageName = pkgName // 提取包名
//		for _, file := range pkg.Files {
//			ast.Inspect(file, func(n ast.Node) bool {
//				ts, ok := n.(*ast.TypeSpec)
//				if ok {
//					structType, ok := ts.Type.(*ast.StructType)
//					if ok {
//						structName := ts.Name.Name
//						for _, field := range structType.Fields.List {
//							for _, name := range field.Names {
//								data.Fields = append(data.Fields, Field{
//									StructName: structName,
//									FieldName:  name.Name,
//									FieldType:  typeInfo(field.Type), // 使用 typeInfo 函数
//								})
//							}
//						}
//					}
//				}
//				return true
//			})
//		}
//	}
//
//	if len(data.Fields) == 0 {
//		fmt.Println("No struct fields found.")
//		return
//	}
//
//	outputFile, err := os.Create("accessor_methods.go")
//	if err != nil {
//		fmt.Printf("there are some err = %v\n", err)
//		return
//	}
//	defer func(outputFile *os.File) {
//		err := outputFile.Close()
//		if err != nil {
//			fmt.Printf("there are some err = %v\n", err)
//		}
//	}(outputFile)
//
//	must := template.Must(template.New("methods").Parse(tmpl))
//	if err := must.Execute(outputFile, data); err != nil {
//		fmt.Println(err)
//	}
//}
